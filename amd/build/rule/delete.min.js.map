{"version":3,"file":"delete.min.js","sources":["../../src/rule/delete.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module    local_notificationsagent/rule/delete\n * @copyright 2023 ISYC <soporte@isyc.com>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport {unlinkRule, deleteRule} from 'local_notificationsagent/rule/repository';\n\n/**\n * Types of rule deletion\n * \n * @type {{RULE_DELETE_TYPE: boolean}}\n */\nconst RULE_DELETE_TYPE = {\n    UNLINKED: 0,\n    DELETED: 1,\n};\n\nconst RULE_UNLINK_STRING = [\n    {\n        key: 'unlinkaccept', component: 'local_notificationsagent',\n    },\n    {\n        key: 'type_template', component: 'local_notificationsagent',\n    }\n];\n\n/**\n * Registers the click event listener for the unlink, or delete button of a rule\n */\nexport const init = () => {\n    $('#deleteRuleModal').on('show.bs.modal', function (e) {\n        ruleButton = $(e.relatedTarget);\n        let id = ruleButton.data('ruleid');\n        value = ruleButton.data('value');\n\n        if (!value) {\n            value = RULE_DELETE_TYPE.UNLINKED;\n        } else {\n            value = RULE_DELETE_TYPE.DELETED;\n        }\n\n        const modal = $(this);\n\n        const requiredStrings = [\n            [\n                {key: 'unlinktitle', component: 'local_notificationsagent', param: {\n                    title: $('#card-' + id + ' .name').text()\n                }},\n                {key: 'unlinkcontent', component: 'local_notificationsagent', param: {\n                    title: $('#card-' + id + ' .name').text()\n                }},\n            ],\n            [\n                {key: 'deletetitle', component: 'local_notificationsagent', param: {\n                    title: $('#card-' + id + ' .name').text()\n                }},\n                {key: 'deletecontent', component: 'local_notificationsagent', param: {\n                    title: $('#card-' + id + ' .name').text()\n                }},\n            ]\n        ]\n\n        getStrings(requiredStrings[value]).then(([ruleTitle, ruleContent]) => {\n            modal.find('.modal-title').text(ruleTitle);\n            modal.find('.modal-body > div').text(ruleContent);\n        });\n    });\n\n    $('#deleteRuleModal #acceptDeleteRule').on('click', (e) => {\n        e.preventDefault();\n\n        if (value == RULE_DELETE_TYPE.UNLINKED) {\n            setUnlinkRule(ruleButton);\n        } else {\n            setDeleteRule(ruleButton);\n        }\n    });\n};\n\n/**\n * Unlinks a given rule from the course\n * \n * @param {HTMLElement} ruleButton\n * @returns {Promise<void>}\n */\nconst setUnlinkRule = async(ruleButton) => {\n    let id = ruleButton.data('ruleid');\n\n    $('#deleteRuleModal').modal('hide');\n\n    try {\n        response = await unlinkRule(id);\n        \n        if ($.isEmptyObject(response['warnings'])) {\n            ruleButton.addClass('d-none');\n    \n            getStrings(RULE_UNLINK_STRING).then(([ruleUnlinked, ruleTemplateType]) => {\n                $('div[id=\"card-' + id + '\"]').find('#card-type').text(ruleTemplateType);\n                $('div[id=\"card-' + id + '\"]').removeClass('card card-rule').addClass('card card-template');\n                $('div[id=\"card-' + id + '\"]').find('#card-type').removeClass('badge badge-rule').addClass('badge badge-template');\n        \n                $('a[data-ruleid=\"' + id + '\"][data-target=\"#deleteRuleModal\"][data-value=\"1\"]').removeClass('d-none');\n                Notification.addNotification({\n                    message: ruleUnlinked,\n                    type: 'info'\n                }); \n            });\n        } else {\n            Notification.addNotification({\n                message: response['warnings'][0].message,\n                type: 'error'\n            });\n        }\n\n    } catch (exception) {\n        Notification.exception(exception);\n    }\n};\n\n/**\n * Deletes a given rule from the course\n * \n * @param {HTMLElement} ruleButton\n * @returns {Promise<void>}\n */\nconst setDeleteRule = async(ruleButton) => {\n    let id = ruleButton.data('ruleid');\n\n    $('#deleteRuleModal').modal('hide');\n\n    try {\n        response = await deleteRule(id);\n        \n        if ($.isEmptyObject(response['warnings'])) {\n            ruleButton.addClass('d-none');\n    \n            getString('deleteaccept', 'local_notificationsagent').then(ruleDeleted => {\n                ruleButton.addClass('d-none');\n        \n                $('div[id=\"card-' + id + '\"]').remove();\n               \n                Notification.addNotification({\n                    message: ruleDeleted,\n                    type: 'info'\n                }); \n            });\n        } else {\n            Notification.addNotification({\n                message: response['warnings'][0].message,\n                type: 'error'\n            });\n        }\n\n    } catch (exception) {\n        Notification.exception(exception);\n    }\n};"],"names":["RULE_DELETE_TYPE","RULE_UNLINK_STRING","key","component","$","on","e","ruleButton","relatedTarget","id","data","value","modal","this","requiredStrings","param","title","text","then","_ref","ruleTitle","ruleContent","find","preventDefault","setUnlinkRule","setDeleteRule","async","response","isEmptyObject","addClass","_ref2","ruleUnlinked","ruleTemplateType","removeClass","addNotification","message","type","exception","ruleDeleted","remove"],"mappings":";;;;;4JA8BMA,0BACQ,EADRA,yBAEO,EAGPC,mBAAqB,CACvB,CACIC,IAAK,eAAgBC,UAAW,4BAEpC,CACID,IAAK,gBAAiBC,UAAW,2CAOrB,KAChBC,EAAE,oBAAoBC,GAAG,iBAAiB,SAAUC,GAChDC,WAAaH,EAAEE,EAAEE,mBACbC,GAAKF,WAAWG,KAAK,UACzBC,MAAQJ,WAAWG,KAAK,SAEnBC,MAGDA,MAAQX,yBAFRW,MAAQX,gCAKNY,MAAQR,EAAES,MAEVC,gBAAkB,CACpB,CACI,CAACZ,IAAK,cAAeC,UAAW,2BAA4BY,MAAO,CAC/DC,MAAOZ,EAAE,SAAWK,GAAK,UAAUQ,SAEvC,CAACf,IAAK,gBAAiBC,UAAW,2BAA4BY,MAAO,CACjEC,MAAOZ,EAAE,SAAWK,GAAK,UAAUQ,UAG3C,CACI,CAACf,IAAK,cAAeC,UAAW,2BAA4BY,MAAO,CAC/DC,MAAOZ,EAAE,SAAWK,GAAK,UAAUQ,SAEvC,CAACf,IAAK,gBAAiBC,UAAW,2BAA4BY,MAAO,CACjEC,MAAOZ,EAAE,SAAWK,GAAK,UAAUQ,gCAKpCH,gBAAgBH,QAAQO,MAAKC,WAAEC,UAAWC,kBACjDT,MAAMU,KAAK,gBAAgBL,KAAKG,WAChCR,MAAMU,KAAK,qBAAqBL,KAAKI,mBAI7CjB,EAAE,sCAAsCC,GAAG,SAAUC,IACjDA,EAAEiB,iBAEEZ,OAASX,0BACTwB,cAAcjB,YAEdkB,cAAclB,sBAWpBiB,cAAgBE,MAAAA,iBACdjB,GAAKF,WAAWG,KAAK,UAEzBN,EAAE,oBAAoBQ,MAAM,YAGxBe,eAAiB,0BAAWlB,IAExBL,EAAEwB,cAAcD,SAAQ,WACxBpB,WAAWsB,SAAS,+BAET5B,oBAAoBiB,MAAKY,YAAEC,aAAcC,wBAChD5B,EAAE,gBAAkBK,GAAK,MAAMa,KAAK,cAAcL,KAAKe,kBACvD5B,EAAE,gBAAkBK,GAAK,MAAMwB,YAAY,kBAAkBJ,SAAS,sBACtEzB,EAAE,gBAAkBK,GAAK,MAAMa,KAAK,cAAcW,YAAY,oBAAoBJ,SAAS,wBAE3FzB,EAAE,kBAAoBK,GAAK,sDAAsDwB,YAAY,gCAChFC,gBAAgB,CACzBC,QAASJ,aACTK,KAAM,mCAIDF,gBAAgB,CACzBC,QAASR,SAAQ,SAAa,GAAGQ,QACjCC,KAAM,UAIhB,MAAOC,iCACQA,UAAUA,aAUzBZ,cAAgBC,MAAAA,iBACdjB,GAAKF,WAAWG,KAAK,UAEzBN,EAAE,oBAAoBQ,MAAM,YAGxBe,eAAiB,0BAAWlB,IAExBL,EAAEwB,cAAcD,SAAQ,WACxBpB,WAAWsB,SAAS,8BAEV,eAAgB,4BAA4BX,MAAKoB,cACvD/B,WAAWsB,SAAS,UAEpBzB,EAAE,gBAAkBK,GAAK,MAAM8B,+BAElBL,gBAAgB,CACzBC,QAASG,YACTF,KAAM,mCAIDF,gBAAgB,CACzBC,QAASR,SAAQ,SAAa,GAAGQ,QACjCC,KAAM,UAIhB,MAAOC,iCACQA,UAAUA"}